import java.util.Random;

//Program to play the name game
/**
 * 
 * Ask the user if they want to play a game.
 * If they want to, ask for their name
 * and change its first letter to make a rhyming word.
 * 
 * requires "ConsoleProgram.java" made by codehs
 * ran on https://codehs.com/sandbox/id/the-name-game-8ZKkj8
 * 
 * @author josephhughes
 */

public class TheNameGame extends ConsoleProgram {
    public void run() {
        do {
            /**
             * 
             * Communicates with the user to get them to use "rhymer()"
             * 
             * @param answer    yes or no answer to question
             */
            String answer = readLine("Do you want to play the name game?: (y/n) ");
            if (answer.matches("[yYyesYesYEStrueTrueTRUEsureSureSUREokOkOKokayOkayOKAY]+"))
            /**
             * user can input y, Y, yes, Yes, YES, true, True, TRUE,
             * sure, Sure, SURE, ok, Ok, OK, okay, Okay, or OKAY
             * as y responses to play the game just in case
             */
            {
                println("\nOk!\n");
                rhymer();
                continue;
            } else if (answer.matches("[nNnoNoNOfalseFalseFALSE]+"))
            /**
             * user can input n, N, no, No, NO, false, False, FALSE 
             * as y responses to play the game just in case
             */
            {
                println("\nOk, goodbye!\n");
                System.exit(0); //end of program
                break;
            } else {
                println("\nSorry, I can't understand you.\nPlease respond y or n.\n"); //provides catch in case user inputs something incorrect
                continue;
            }
        } while (true);
    }

    public void rhymer() {
        do {
            /**
             * 
             * takes user input and changes the first letter to a different letter
             * 
             * @param userName  read from user input
             * @param rhyme empty to store word that will be returned
             * @param alphabet  base for list of acceptable replace characters
             * @param firstLetter   converts char from beginning of "userName" to string
             * @param alphabetNew   alphabet without "firstLetter"
             * @param randomChar    draws random letter from "alphabetNew"
             * 
             */
            String userName = readLine("Type in your first name: ");
            String rhyme = "";
            if (!userName.matches("[a-zA-Z]+")) {
                println("\nYour name contains numbers \nor other foreign characters, try again.\n");
                /**
                 * you can't rhyme with numbers or punctuation,
                 * this provides catch if word is outside alphabetical bounds
                 */
            } else if (userName.length() < 2) {
                println("\nYour name is too short to rhyme, try again.\n");
                /**
                 * you can't rhyme with one letter, 
                 * this provides catch if word is shorter than 2 letter
                 */
            } else {
                Random rnd = new Random(); //implements "java.util.Random"
                String alphabet = "abcdefghijklmnopqrstuvwxyz";
                String firstLetter = String.valueOf(userName.toLowerCase().charAt(0));
                String alphabetNew = alphabet.replaceFirst(firstLetter, "");
                char randomChar = alphabetNew.charAt(rnd.nextInt(alphabetNew.length()));
                rhyme = randomChar + userName.substring(1); //appends username without first letter to "randomChar"
                println("\nYour name, " + userName + ", rhymes with " + rhyme + ".\n");
                break; //leaves "rhymer()" to return to run.
            }
        } while (true);
    }
}




































import java.util.*;
public class ConsoleProgram {

    private Scanner scanner;

    public static void main(String[] args) {
        // Assume the class name is passed in as the first argument.

        if (args.length == 0) {
            System.out.println("Please provide the name of the main class as an argument.");
            return;
        }

        String mainClassName = args[0];

        try {
            Class mainClass = Class.forName(mainClassName);
            Object obj = mainClass.newInstance();
            ConsoleProgram program = (ConsoleProgram) obj;
            program.run();
        } catch (IllegalAccessException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        } catch (InstantiationException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        } catch (ClassNotFoundException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        }
    }

    public void run() {
        /* Overridden by subclass */
    }

    public ConsoleProgram() {
        scanner = new Scanner(System.in);

    }

    public String readLine(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    public boolean readBoolean(String prompt) {

        while (true) {
            String input = readLine(prompt);

            if (input.equalsIgnoreCase("true")) {
                return true;
            }

            if (input.equalsIgnoreCase("false")) {
                return false;
            }
        }
    }

    public double readDouble(String prompt) {

        while (true) {
            String input = readLine(prompt);
            try {
                double n = Double.valueOf(input).doubleValue();
                return n;
            } catch (NumberFormatException e) {

            }
        }
    }

    // Allow the user to get an integer.
    public int readInt(String prompt) {

        while (true) {
            String input = readLine(prompt);
            try {
                int n = Integer.parseInt(input);
                return n;
            } catch (NumberFormatException e) {

            }
        }
    }

    /**
     * Allows us to use a shorthand version for System.out.println()
     */
    public void println() {
        System.out.println();
    }

    /**
     * Allows us to use a shorthand version for System.out.println(String s)
     */
    public void println(String s) {
        System.out.println(s);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(boolean x)
     */
    public void println(boolean x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(char x)
     */
    public void println(char x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(char[] x)
     */
    public void println(char[] x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(int x)
     */
    public void println(int x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(long x)
     */
    public void println(long x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(float x)
     */
    public void println(float x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(double x)
     */
    public void println(double x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(Object o)
     */
    public void println(Object o) {
        System.out.println(o);
    }

    /**
     * Allows us to use a shorthand version for System.out.print()
     */
    public void print() {
        System.out.print("");
    }

    /**
     * Allows us to use a shorthand version for System.out.print(String s)
     */
    public void print(String s) {
        System.out.print(s);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(boolean x)
     */
    public void print(boolean x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(char x)
     */
    public void print(char x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(char[] x)
     */
    public void print(char[] x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(int x)
     */
    public void print(int x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(long x)
     */
    public void print(long x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(float x)
     */
    public void print(float x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(double x)
     */
    public void print(double x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(Object o)
     */
    public void print(Object o) {
        System.out.print(o);
    }
}
